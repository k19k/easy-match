easy-match
==========

A simple pattern matcher that allows you to bind parts of matched
expressions to variables.

This is basically the work of an hour or two done in the day after an
all-nighter while being distracted by other work, so don't expect
perfection.

The current version uses tail recursion to scan patterns, which can be
optimized by many Common Lisp implementations.  I find it hard to
imagine anyone's patterns becoming so deeply nested that the recursion
used to scan them becomes a problem, in any case.

Documentation
=============

(match expr &rest clauses)

Do simple pattern matching on EXPR, binding any symbols in the
patterns in CLAUSES for their respective bodies.  Each clause has the
form (pattern &rest body).

MATCH works similarly to COND: clauses are tried in sequential order,
and the first matching pattern decides which clause executes and
returns a value.  If no patterns are matched, NIL is returned.

Example: a pattern matching any expression.  This may be useful as a
default clause.  Any clauses after this one will never execute.

  (match foo
    (x (format t \"~A\" x))) ; x is bound to the value of foo

Example: required values.  In this example, FOO must be a list
containing 0, 1, 2, some value, and the keyword :BAR.  X is bound to
the unspecified value.

  (match foo
    ((0 1 2 x :bar) x))

Currently only elements of lists may be matched for binding.  All
other data is compared with EQ.
